/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 109.0, "minX": 0.0, "maxY": 49947.0, "series": [{"data": [[0.0, 109.0], [0.1, 109.0], [0.2, 109.0], [0.3, 109.0], [0.4, 109.0], [0.5, 109.0], [0.6, 109.0], [0.7, 109.0], [0.8, 114.0], [0.9, 114.0], [1.0, 114.0], [1.1, 114.0], [1.2, 114.0], [1.3, 114.0], [1.4, 114.0], [1.5, 114.0], [1.6, 120.0], [1.7, 120.0], [1.8, 120.0], [1.9, 120.0], [2.0, 120.0], [2.1, 120.0], [2.2, 120.0], [2.3, 120.0], [2.4, 120.0], [2.5, 131.0], [2.6, 131.0], [2.7, 131.0], [2.8, 131.0], [2.9, 131.0], [3.0, 131.0], [3.1, 131.0], [3.2, 134.0], [3.3, 134.0], [3.4, 134.0], [3.5, 134.0], [3.6, 134.0], [3.7, 134.0], [3.8, 134.0], [3.9, 134.0], [4.0, 138.0], [4.1, 138.0], [4.2, 138.0], [4.3, 138.0], [4.4, 138.0], [4.5, 138.0], [4.6, 138.0], [4.7, 138.0], [4.8, 149.0], [4.9, 149.0], [5.0, 149.0], [5.1, 149.0], [5.2, 149.0], [5.3, 149.0], [5.4, 149.0], [5.5, 149.0], [5.6, 154.0], [5.7, 154.0], [5.8, 154.0], [5.9, 154.0], [6.0, 154.0], [6.1, 154.0], [6.2, 154.0], [6.3, 154.0], [6.4, 161.0], [6.5, 161.0], [6.6, 161.0], [6.7, 161.0], [6.8, 161.0], [6.9, 161.0], [7.0, 161.0], [7.1, 161.0], [7.2, 180.0], [7.3, 180.0], [7.4, 180.0], [7.5, 180.0], [7.6, 180.0], [7.7, 180.0], [7.8, 180.0], [7.9, 180.0], [8.0, 183.0], [8.1, 183.0], [8.2, 183.0], [8.3, 183.0], [8.4, 183.0], [8.5, 183.0], [8.6, 183.0], [8.7, 183.0], [8.8, 195.0], [8.9, 195.0], [9.0, 195.0], [9.1, 195.0], [9.2, 195.0], [9.3, 195.0], [9.4, 195.0], [9.5, 195.0], [9.6, 200.0], [9.7, 200.0], [9.8, 200.0], [9.9, 200.0], [10.0, 200.0], [10.1, 200.0], [10.2, 200.0], [10.3, 200.0], [10.4, 205.0], [10.5, 205.0], [10.6, 205.0], [10.7, 205.0], [10.8, 205.0], [10.9, 205.0], [11.0, 205.0], [11.1, 205.0], [11.2, 205.0], [11.3, 220.0], [11.4, 220.0], [11.5, 220.0], [11.6, 220.0], [11.7, 220.0], [11.8, 220.0], [11.9, 220.0], [12.0, 220.0], [12.1, 221.0], [12.2, 221.0], [12.3, 221.0], [12.4, 221.0], [12.5, 221.0], [12.6, 221.0], [12.7, 221.0], [12.8, 221.0], [12.9, 222.0], [13.0, 222.0], [13.1, 222.0], [13.2, 222.0], [13.3, 222.0], [13.4, 222.0], [13.5, 222.0], [13.6, 222.0], [13.7, 224.0], [13.8, 224.0], [13.9, 224.0], [14.0, 224.0], [14.1, 224.0], [14.2, 224.0], [14.3, 224.0], [14.4, 224.0], [14.5, 225.0], [14.6, 225.0], [14.7, 225.0], [14.8, 225.0], [14.9, 225.0], [15.0, 225.0], [15.1, 225.0], [15.2, 225.0], [15.3, 234.0], [15.4, 234.0], [15.5, 234.0], [15.6, 234.0], [15.7, 234.0], [15.8, 234.0], [15.9, 234.0], [16.0, 234.0], [16.1, 242.0], [16.2, 242.0], [16.3, 242.0], [16.4, 242.0], [16.5, 242.0], [16.6, 242.0], [16.7, 242.0], [16.8, 242.0], [16.9, 243.0], [17.0, 243.0], [17.1, 243.0], [17.2, 243.0], [17.3, 243.0], [17.4, 243.0], [17.5, 243.0], [17.6, 243.0], [17.7, 245.0], [17.8, 245.0], [17.9, 245.0], [18.0, 245.0], [18.1, 245.0], [18.2, 245.0], [18.3, 245.0], [18.4, 245.0], [18.5, 254.0], [18.6, 254.0], [18.7, 254.0], [18.8, 254.0], [18.9, 254.0], [19.0, 254.0], [19.1, 254.0], [19.2, 254.0], [19.3, 256.0], [19.4, 256.0], [19.5, 256.0], [19.6, 256.0], [19.7, 256.0], [19.8, 256.0], [19.9, 256.0], [20.0, 256.0], [20.1, 259.0], [20.2, 259.0], [20.3, 259.0], [20.4, 259.0], [20.5, 259.0], [20.6, 259.0], [20.7, 259.0], [20.8, 259.0], [20.9, 261.0], [21.0, 261.0], [21.1, 261.0], [21.2, 261.0], [21.3, 261.0], [21.4, 261.0], [21.5, 261.0], [21.6, 261.0], [21.7, 261.0], [21.8, 261.0], [21.9, 261.0], [22.0, 261.0], [22.1, 261.0], [22.2, 261.0], [22.3, 261.0], [22.4, 261.0], [22.5, 268.0], [22.6, 268.0], [22.7, 268.0], [22.8, 268.0], [22.9, 268.0], [23.0, 268.0], [23.1, 268.0], [23.2, 268.0], [23.3, 275.0], [23.4, 275.0], [23.5, 275.0], [23.6, 275.0], [23.7, 275.0], [23.8, 275.0], [23.9, 275.0], [24.0, 275.0], [24.1, 279.0], [24.2, 279.0], [24.3, 279.0], [24.4, 279.0], [24.5, 279.0], [24.6, 279.0], [24.7, 279.0], [24.8, 279.0], [24.9, 279.0], [25.0, 279.0], [25.1, 279.0], [25.2, 279.0], [25.3, 279.0], [25.4, 279.0], [25.5, 279.0], [25.6, 279.0], [25.7, 283.0], [25.8, 283.0], [25.9, 283.0], [26.0, 283.0], [26.1, 283.0], [26.2, 283.0], [26.3, 283.0], [26.4, 283.0], [26.5, 290.0], [26.6, 290.0], [26.7, 290.0], [26.8, 290.0], [26.9, 290.0], [27.0, 290.0], [27.1, 290.0], [27.2, 290.0], [27.3, 293.0], [27.4, 293.0], [27.5, 293.0], [27.6, 293.0], [27.7, 293.0], [27.8, 293.0], [27.9, 293.0], [28.0, 293.0], [28.1, 308.0], [28.2, 308.0], [28.3, 308.0], [28.4, 308.0], [28.5, 308.0], [28.6, 308.0], [28.7, 308.0], [28.8, 308.0], [28.9, 312.0], [29.0, 312.0], [29.1, 312.0], [29.2, 312.0], [29.3, 312.0], [29.4, 312.0], [29.5, 312.0], [29.6, 312.0], [29.7, 313.0], [29.8, 313.0], [29.9, 313.0], [30.0, 313.0], [30.1, 313.0], [30.2, 313.0], [30.3, 313.0], [30.4, 313.0], [30.5, 322.0], [30.6, 322.0], [30.7, 322.0], [30.8, 322.0], [30.9, 322.0], [31.0, 322.0], [31.1, 322.0], [31.2, 322.0], [31.3, 332.0], [31.4, 332.0], [31.5, 332.0], [31.6, 332.0], [31.7, 332.0], [31.8, 332.0], [31.9, 332.0], [32.0, 332.0], [32.1, 332.0], [32.2, 332.0], [32.3, 332.0], [32.4, 332.0], [32.5, 332.0], [32.6, 332.0], [32.7, 332.0], [32.8, 332.0], [32.9, 333.0], [33.0, 333.0], [33.1, 333.0], [33.2, 333.0], [33.3, 333.0], [33.4, 333.0], [33.5, 333.0], [33.6, 333.0], [33.7, 335.0], [33.8, 335.0], [33.9, 335.0], [34.0, 335.0], [34.1, 335.0], [34.2, 335.0], [34.3, 335.0], [34.4, 335.0], [34.5, 335.0], [34.6, 335.0], [34.7, 335.0], [34.8, 335.0], [34.9, 335.0], [35.0, 335.0], [35.1, 335.0], [35.2, 335.0], [35.3, 337.0], [35.4, 337.0], [35.5, 337.0], [35.6, 337.0], [35.7, 337.0], [35.8, 337.0], [35.9, 337.0], [36.0, 337.0], [36.1, 341.0], [36.2, 341.0], [36.3, 341.0], [36.4, 341.0], [36.5, 341.0], [36.6, 341.0], [36.7, 341.0], [36.8, 341.0], [36.9, 342.0], [37.0, 342.0], [37.1, 342.0], [37.2, 342.0], [37.3, 342.0], [37.4, 342.0], [37.5, 342.0], [37.6, 342.0], [37.7, 351.0], [37.8, 351.0], [37.9, 351.0], [38.0, 351.0], [38.1, 351.0], [38.2, 351.0], [38.3, 351.0], [38.4, 351.0], [38.5, 364.0], [38.6, 364.0], [38.7, 364.0], [38.8, 364.0], [38.9, 364.0], [39.0, 364.0], [39.1, 364.0], [39.2, 364.0], [39.3, 364.0], [39.4, 364.0], [39.5, 364.0], [39.6, 364.0], [39.7, 364.0], [39.8, 364.0], [39.9, 364.0], [40.0, 364.0], [40.1, 375.0], [40.2, 375.0], [40.3, 375.0], [40.4, 375.0], [40.5, 375.0], [40.6, 375.0], [40.7, 375.0], [40.8, 375.0], [40.9, 376.0], [41.0, 376.0], [41.1, 376.0], [41.2, 376.0], [41.3, 376.0], [41.4, 376.0], [41.5, 376.0], [41.6, 376.0], [41.7, 376.0], [41.8, 376.0], [41.9, 376.0], [42.0, 376.0], [42.1, 376.0], [42.2, 376.0], [42.3, 376.0], [42.4, 376.0], [42.5, 399.0], [42.6, 399.0], [42.7, 399.0], [42.8, 399.0], [42.9, 399.0], [43.0, 399.0], [43.1, 399.0], [43.2, 403.0], [43.3, 403.0], [43.4, 403.0], [43.5, 403.0], [43.6, 403.0], [43.7, 403.0], [43.8, 403.0], [43.9, 403.0], [44.0, 403.0], [44.1, 403.0], [44.2, 403.0], [44.3, 403.0], [44.4, 403.0], [44.5, 403.0], [44.6, 403.0], [44.7, 403.0], [44.8, 403.0], [44.9, 407.0], [45.0, 407.0], [45.1, 407.0], [45.2, 407.0], [45.3, 407.0], [45.4, 407.0], [45.5, 407.0], [45.6, 417.0], [45.7, 417.0], [45.8, 417.0], [45.9, 417.0], [46.0, 417.0], [46.1, 417.0], [46.2, 417.0], [46.3, 417.0], [46.4, 418.0], [46.5, 418.0], [46.6, 418.0], [46.7, 418.0], [46.8, 418.0], [46.9, 418.0], [47.0, 418.0], [47.1, 418.0], [47.2, 421.0], [47.3, 421.0], [47.4, 421.0], [47.5, 421.0], [47.6, 421.0], [47.7, 421.0], [47.8, 421.0], [47.9, 421.0], [48.0, 429.0], [48.1, 429.0], [48.2, 429.0], [48.3, 429.0], [48.4, 429.0], [48.5, 429.0], [48.6, 429.0], [48.7, 429.0], [48.8, 443.0], [48.9, 443.0], [49.0, 443.0], [49.1, 443.0], [49.2, 443.0], [49.3, 443.0], [49.4, 443.0], [49.5, 443.0], [49.6, 448.0], [49.7, 448.0], [49.8, 448.0], [49.9, 448.0], [50.0, 448.0], [50.1, 448.0], [50.2, 448.0], [50.3, 448.0], [50.4, 448.0], [50.5, 448.0], [50.6, 448.0], [50.7, 448.0], [50.8, 448.0], [50.9, 448.0], [51.0, 448.0], [51.1, 448.0], [51.2, 457.0], [51.3, 457.0], [51.4, 457.0], [51.5, 457.0], [51.6, 457.0], [51.7, 457.0], [51.8, 457.0], [51.9, 457.0], [52.0, 457.0], [52.1, 457.0], [52.2, 457.0], [52.3, 457.0], [52.4, 457.0], [52.5, 457.0], [52.6, 457.0], [52.7, 457.0], [52.8, 463.0], [52.9, 463.0], [53.0, 463.0], [53.1, 463.0], [53.2, 463.0], [53.3, 463.0], [53.4, 463.0], [53.5, 463.0], [53.6, 464.0], [53.7, 464.0], [53.8, 464.0], [53.9, 464.0], [54.0, 464.0], [54.1, 464.0], [54.2, 464.0], [54.3, 464.0], [54.4, 470.0], [54.5, 470.0], [54.6, 470.0], [54.7, 470.0], [54.8, 470.0], [54.9, 470.0], [55.0, 470.0], [55.1, 470.0], [55.2, 476.0], [55.3, 476.0], [55.4, 476.0], [55.5, 476.0], [55.6, 476.0], [55.7, 476.0], [55.8, 476.0], [55.9, 476.0], [56.0, 481.0], [56.1, 481.0], [56.2, 481.0], [56.3, 481.0], [56.4, 481.0], [56.5, 481.0], [56.6, 481.0], [56.7, 481.0], [56.8, 484.0], [56.9, 484.0], [57.0, 484.0], [57.1, 484.0], [57.2, 484.0], [57.3, 484.0], [57.4, 484.0], [57.5, 484.0], [57.6, 485.0], [57.7, 485.0], [57.8, 485.0], [57.9, 485.0], [58.0, 485.0], [58.1, 485.0], [58.2, 485.0], [58.3, 485.0], [58.4, 493.0], [58.5, 493.0], [58.6, 493.0], [58.7, 493.0], [58.8, 493.0], [58.9, 493.0], [59.0, 493.0], [59.1, 493.0], [59.2, 515.0], [59.3, 515.0], [59.4, 515.0], [59.5, 515.0], [59.6, 515.0], [59.7, 515.0], [59.8, 515.0], [59.9, 515.0], [60.0, 516.0], [60.1, 516.0], [60.2, 516.0], [60.3, 516.0], [60.4, 516.0], [60.5, 516.0], [60.6, 516.0], [60.7, 516.0], [60.8, 529.0], [60.9, 529.0], [61.0, 529.0], [61.1, 529.0], [61.2, 529.0], [61.3, 529.0], [61.4, 529.0], [61.5, 529.0], [61.6, 536.0], [61.7, 536.0], [61.8, 536.0], [61.9, 536.0], [62.0, 536.0], [62.1, 536.0], [62.2, 536.0], [62.3, 536.0], [62.4, 539.0], [62.5, 539.0], [62.6, 539.0], [62.7, 539.0], [62.8, 539.0], [62.9, 539.0], [63.0, 539.0], [63.1, 539.0], [63.2, 542.0], [63.3, 542.0], [63.4, 542.0], [63.5, 542.0], [63.6, 542.0], [63.7, 542.0], [63.8, 542.0], [63.9, 542.0], [64.0, 542.0], [64.1, 542.0], [64.2, 542.0], [64.3, 542.0], [64.4, 542.0], [64.5, 542.0], [64.6, 542.0], [64.7, 542.0], [64.8, 550.0], [64.9, 550.0], [65.0, 550.0], [65.1, 550.0], [65.2, 550.0], [65.3, 550.0], [65.4, 550.0], [65.5, 550.0], [65.6, 550.0], [65.7, 550.0], [65.8, 550.0], [65.9, 550.0], [66.0, 550.0], [66.1, 550.0], [66.2, 550.0], [66.3, 550.0], [66.4, 550.0], [66.5, 550.0], [66.6, 550.0], [66.7, 550.0], [66.8, 550.0], [66.9, 550.0], [67.0, 550.0], [67.1, 550.0], [67.2, 552.0], [67.3, 552.0], [67.4, 552.0], [67.5, 552.0], [67.6, 552.0], [67.7, 552.0], [67.8, 552.0], [67.9, 552.0], [68.0, 559.0], [68.1, 559.0], [68.2, 559.0], [68.3, 559.0], [68.4, 559.0], [68.5, 559.0], [68.6, 559.0], [68.7, 559.0], [68.8, 560.0], [68.9, 560.0], [69.0, 560.0], [69.1, 560.0], [69.2, 560.0], [69.3, 560.0], [69.4, 560.0], [69.5, 560.0], [69.6, 564.0], [69.7, 564.0], [69.8, 564.0], [69.9, 564.0], [70.0, 564.0], [70.1, 564.0], [70.2, 564.0], [70.3, 564.0], [70.4, 630.0], [70.5, 630.0], [70.6, 630.0], [70.7, 630.0], [70.8, 630.0], [70.9, 630.0], [71.0, 630.0], [71.1, 630.0], [71.2, 633.0], [71.3, 633.0], [71.4, 633.0], [71.5, 633.0], [71.6, 633.0], [71.7, 633.0], [71.8, 633.0], [71.9, 633.0], [72.0, 636.0], [72.1, 636.0], [72.2, 636.0], [72.3, 636.0], [72.4, 636.0], [72.5, 636.0], [72.6, 636.0], [72.7, 636.0], [72.8, 660.0], [72.9, 660.0], [73.0, 660.0], [73.1, 660.0], [73.2, 660.0], [73.3, 660.0], [73.4, 660.0], [73.5, 660.0], [73.6, 704.0], [73.7, 704.0], [73.8, 704.0], [73.9, 704.0], [74.0, 704.0], [74.1, 704.0], [74.2, 704.0], [74.3, 704.0], [74.4, 717.0], [74.5, 717.0], [74.6, 717.0], [74.7, 717.0], [74.8, 717.0], [74.9, 717.0], [75.0, 717.0], [75.1, 717.0], [75.2, 738.0], [75.3, 738.0], [75.4, 738.0], [75.5, 738.0], [75.6, 738.0], [75.7, 738.0], [75.8, 738.0], [75.9, 738.0], [76.0, 755.0], [76.1, 755.0], [76.2, 755.0], [76.3, 755.0], [76.4, 755.0], [76.5, 755.0], [76.6, 755.0], [76.7, 755.0], [76.8, 771.0], [76.9, 771.0], [77.0, 771.0], [77.1, 771.0], [77.2, 771.0], [77.3, 771.0], [77.4, 771.0], [77.5, 771.0], [77.6, 776.0], [77.7, 776.0], [77.8, 776.0], [77.9, 776.0], [78.0, 776.0], [78.1, 776.0], [78.2, 776.0], [78.3, 776.0], [78.4, 778.0], [78.5, 778.0], [78.6, 778.0], [78.7, 778.0], [78.8, 778.0], [78.9, 778.0], [79.0, 778.0], [79.1, 778.0], [79.2, 799.0], [79.3, 799.0], [79.4, 799.0], [79.5, 799.0], [79.6, 799.0], [79.7, 799.0], [79.8, 799.0], [79.9, 799.0], [80.0, 805.0], [80.1, 805.0], [80.2, 805.0], [80.3, 805.0], [80.4, 805.0], [80.5, 805.0], [80.6, 805.0], [80.7, 805.0], [80.8, 829.0], [80.9, 829.0], [81.0, 829.0], [81.1, 829.0], [81.2, 829.0], [81.3, 829.0], [81.4, 829.0], [81.5, 829.0], [81.6, 855.0], [81.7, 855.0], [81.8, 855.0], [81.9, 855.0], [82.0, 855.0], [82.1, 855.0], [82.2, 855.0], [82.3, 855.0], [82.4, 871.0], [82.5, 871.0], [82.6, 871.0], [82.7, 871.0], [82.8, 871.0], [82.9, 871.0], [83.0, 871.0], [83.1, 871.0], [83.2, 905.0], [83.3, 905.0], [83.4, 905.0], [83.5, 905.0], [83.6, 905.0], [83.7, 905.0], [83.8, 905.0], [83.9, 905.0], [84.0, 928.0], [84.1, 928.0], [84.2, 928.0], [84.3, 928.0], [84.4, 928.0], [84.5, 928.0], [84.6, 928.0], [84.7, 928.0], [84.8, 928.0], [84.9, 928.0], [85.0, 928.0], [85.1, 928.0], [85.2, 928.0], [85.3, 928.0], [85.4, 928.0], [85.5, 928.0], [85.6, 973.0], [85.7, 973.0], [85.8, 973.0], [85.9, 973.0], [86.0, 973.0], [86.1, 973.0], [86.2, 973.0], [86.3, 973.0], [86.4, 975.0], [86.5, 975.0], [86.6, 975.0], [86.7, 975.0], [86.8, 975.0], [86.9, 975.0], [87.0, 975.0], [87.1, 975.0], [87.2, 976.0], [87.3, 976.0], [87.4, 976.0], [87.5, 976.0], [87.6, 976.0], [87.7, 976.0], [87.8, 976.0], [87.9, 976.0], [88.0, 1068.0], [88.1, 1068.0], [88.2, 1068.0], [88.3, 1068.0], [88.4, 1068.0], [88.5, 1068.0], [88.6, 1068.0], [88.7, 1068.0], [88.8, 1158.0], [88.9, 1158.0], [89.0, 1158.0], [89.1, 1158.0], [89.2, 1158.0], [89.3, 1158.0], [89.4, 1158.0], [89.5, 1158.0], [89.6, 1160.0], [89.7, 1160.0], [89.8, 1160.0], [89.9, 1160.0], [90.0, 1160.0], [90.1, 1160.0], [90.2, 1160.0], [90.3, 1160.0], [90.4, 1308.0], [90.5, 1308.0], [90.6, 1308.0], [90.7, 1308.0], [90.8, 1308.0], [90.9, 1308.0], [91.0, 1308.0], [91.1, 1308.0], [91.2, 1336.0], [91.3, 1336.0], [91.4, 1336.0], [91.5, 1336.0], [91.6, 1336.0], [91.7, 1336.0], [91.8, 1336.0], [91.9, 1336.0], [92.0, 1654.0], [92.1, 1654.0], [92.2, 1654.0], [92.3, 1654.0], [92.4, 1654.0], [92.5, 1654.0], [92.6, 1654.0], [92.7, 1654.0], [92.8, 1700.0], [92.9, 1700.0], [93.0, 1700.0], [93.1, 1700.0], [93.2, 1700.0], [93.3, 1700.0], [93.4, 1700.0], [93.5, 1700.0], [93.6, 1795.0], [93.7, 1795.0], [93.8, 1795.0], [93.9, 1795.0], [94.0, 1795.0], [94.1, 1795.0], [94.2, 1795.0], [94.3, 1795.0], [94.4, 2259.0], [94.5, 2259.0], [94.6, 2259.0], [94.7, 2259.0], [94.8, 2259.0], [94.9, 2259.0], [95.0, 2259.0], [95.1, 2259.0], [95.2, 2272.0], [95.3, 2272.0], [95.4, 2272.0], [95.5, 2272.0], [95.6, 2272.0], [95.7, 2272.0], [95.8, 2272.0], [95.9, 2272.0], [96.0, 2569.0], [96.1, 2569.0], [96.2, 2569.0], [96.3, 2569.0], [96.4, 2569.0], [96.5, 2569.0], [96.6, 2569.0], [96.7, 2569.0], [96.8, 2756.0], [96.9, 2756.0], [97.0, 2756.0], [97.1, 2756.0], [97.2, 2756.0], [97.3, 2756.0], [97.4, 2756.0], [97.5, 2756.0], [97.6, 2933.0], [97.7, 2933.0], [97.8, 2933.0], [97.9, 2933.0], [98.0, 2933.0], [98.1, 2933.0], [98.2, 2933.0], [98.3, 2933.0], [98.4, 4039.0], [98.5, 4039.0], [98.6, 4039.0], [98.7, 4039.0], [98.8, 4039.0], [98.9, 4039.0], [99.0, 4039.0], [99.1, 4039.0], [99.2, 9153.0], [99.3, 9153.0], [99.4, 9153.0], [99.5, 9153.0], [99.6, 9153.0], [99.7, 9153.0], [99.8, 9153.0], [99.9, 9153.0]], "isOverall": false, "label": "Request Writer", "isController": false}, {"data": [[0.0, 758.0], [0.1, 758.0], [0.2, 758.0], [0.3, 758.0], [0.4, 758.0], [0.5, 758.0], [0.6, 758.0], [0.7, 758.0], [0.8, 1428.0], [0.9, 1428.0], [1.0, 1428.0], [1.1, 1428.0], [1.2, 1428.0], [1.3, 1428.0], [1.4, 1428.0], [1.5, 1428.0], [1.6, 2086.0], [1.7, 2086.0], [1.8, 2086.0], [1.9, 2086.0], [2.0, 2086.0], [2.1, 2086.0], [2.2, 2086.0], [2.3, 2086.0], [2.4, 2086.0], [2.5, 2395.0], [2.6, 2395.0], [2.7, 2395.0], [2.8, 2395.0], [2.9, 2395.0], [3.0, 2395.0], [3.1, 2395.0], [3.2, 2583.0], [3.3, 2583.0], [3.4, 2583.0], [3.5, 2583.0], [3.6, 2583.0], [3.7, 2583.0], [3.8, 2583.0], [3.9, 2583.0], [4.0, 3394.0], [4.1, 3394.0], [4.2, 3394.0], [4.3, 3394.0], [4.4, 3394.0], [4.5, 3394.0], [4.6, 3394.0], [4.7, 3394.0], [4.8, 3666.0], [4.9, 3666.0], [5.0, 3666.0], [5.1, 3666.0], [5.2, 3666.0], [5.3, 3666.0], [5.4, 3666.0], [5.5, 3666.0], [5.6, 4058.0], [5.7, 4058.0], [5.8, 4058.0], [5.9, 4058.0], [6.0, 4058.0], [6.1, 4058.0], [6.2, 4058.0], [6.3, 4058.0], [6.4, 4198.0], [6.5, 4198.0], [6.6, 4198.0], [6.7, 4198.0], [6.8, 4198.0], [6.9, 4198.0], [7.0, 4198.0], [7.1, 4198.0], [7.2, 4763.0], [7.3, 4763.0], [7.4, 4763.0], [7.5, 4763.0], [7.6, 4763.0], [7.7, 4763.0], [7.8, 4763.0], [7.9, 4763.0], [8.0, 5347.0], [8.1, 5347.0], [8.2, 5347.0], [8.3, 5347.0], [8.4, 5347.0], [8.5, 5347.0], [8.6, 5347.0], [8.7, 5347.0], [8.8, 5977.0], [8.9, 5977.0], [9.0, 5977.0], [9.1, 5977.0], [9.2, 5977.0], [9.3, 5977.0], [9.4, 5977.0], [9.5, 5977.0], [9.6, 6270.0], [9.7, 6270.0], [9.8, 6270.0], [9.9, 6270.0], [10.0, 6270.0], [10.1, 6270.0], [10.2, 6270.0], [10.3, 6270.0], [10.4, 6806.0], [10.5, 6806.0], [10.6, 6806.0], [10.7, 6806.0], [10.8, 6806.0], [10.9, 6806.0], [11.0, 6806.0], [11.1, 6806.0], [11.2, 6806.0], [11.3, 6952.0], [11.4, 6952.0], [11.5, 6952.0], [11.6, 6952.0], [11.7, 6952.0], [11.8, 6952.0], [11.9, 6952.0], [12.0, 6952.0], [12.1, 7000.0], [12.2, 7000.0], [12.3, 7000.0], [12.4, 7000.0], [12.5, 7000.0], [12.6, 7000.0], [12.7, 7000.0], [12.8, 7000.0], [12.9, 7122.0], [13.0, 7122.0], [13.1, 7122.0], [13.2, 7122.0], [13.3, 7122.0], [13.4, 7122.0], [13.5, 7122.0], [13.6, 7122.0], [13.7, 7439.0], [13.8, 7439.0], [13.9, 7439.0], [14.0, 7439.0], [14.1, 7439.0], [14.2, 7439.0], [14.3, 7439.0], [14.4, 7439.0], [14.5, 8420.0], [14.6, 8420.0], [14.7, 8420.0], [14.8, 8420.0], [14.9, 8420.0], [15.0, 8420.0], [15.1, 8420.0], [15.2, 8420.0], [15.3, 8923.0], [15.4, 8923.0], [15.5, 8923.0], [15.6, 8923.0], [15.7, 8923.0], [15.8, 8923.0], [15.9, 8923.0], [16.0, 8923.0], [16.1, 9357.0], [16.2, 9357.0], [16.3, 9357.0], [16.4, 9357.0], [16.5, 9357.0], [16.6, 9357.0], [16.7, 9357.0], [16.8, 9357.0], [16.9, 9887.0], [17.0, 9887.0], [17.1, 9887.0], [17.2, 9887.0], [17.3, 9887.0], [17.4, 9887.0], [17.5, 9887.0], [17.6, 9887.0], [17.7, 10239.0], [17.8, 10239.0], [17.9, 10239.0], [18.0, 10239.0], [18.1, 10239.0], [18.2, 10239.0], [18.3, 10239.0], [18.4, 10239.0], [18.5, 10242.0], [18.6, 10242.0], [18.7, 10242.0], [18.8, 10242.0], [18.9, 10242.0], [19.0, 10242.0], [19.1, 10242.0], [19.2, 10242.0], [19.3, 10299.0], [19.4, 10299.0], [19.5, 10299.0], [19.6, 10299.0], [19.7, 10299.0], [19.8, 10299.0], [19.9, 10299.0], [20.0, 10299.0], [20.1, 10354.0], [20.2, 10354.0], [20.3, 10354.0], [20.4, 10354.0], [20.5, 10354.0], [20.6, 10354.0], [20.7, 10354.0], [20.8, 10354.0], [20.9, 10415.0], [21.0, 10415.0], [21.1, 10415.0], [21.2, 10415.0], [21.3, 10415.0], [21.4, 10415.0], [21.5, 10415.0], [21.6, 10415.0], [21.7, 10687.0], [21.8, 10687.0], [21.9, 10687.0], [22.0, 10687.0], [22.1, 10687.0], [22.2, 10687.0], [22.3, 10687.0], [22.4, 10687.0], [22.5, 10725.0], [22.6, 10725.0], [22.7, 10725.0], [22.8, 10725.0], [22.9, 10725.0], [23.0, 10725.0], [23.1, 10725.0], [23.2, 10725.0], [23.3, 10889.0], [23.4, 10889.0], [23.5, 10889.0], [23.6, 10889.0], [23.7, 10889.0], [23.8, 10889.0], [23.9, 10889.0], [24.0, 10889.0], [24.1, 11077.0], [24.2, 11077.0], [24.3, 11077.0], [24.4, 11077.0], [24.5, 11077.0], [24.6, 11077.0], [24.7, 11077.0], [24.8, 11077.0], [24.9, 12032.0], [25.0, 12032.0], [25.1, 12032.0], [25.2, 12032.0], [25.3, 12032.0], [25.4, 12032.0], [25.5, 12032.0], [25.6, 12032.0], [25.7, 12086.0], [25.8, 12086.0], [25.9, 12086.0], [26.0, 12086.0], [26.1, 12086.0], [26.2, 12086.0], [26.3, 12086.0], [26.4, 12086.0], [26.5, 12290.0], [26.6, 12290.0], [26.7, 12290.0], [26.8, 12290.0], [26.9, 12290.0], [27.0, 12290.0], [27.1, 12290.0], [27.2, 12290.0], [27.3, 12319.0], [27.4, 12319.0], [27.5, 12319.0], [27.6, 12319.0], [27.7, 12319.0], [27.8, 12319.0], [27.9, 12319.0], [28.0, 12319.0], [28.1, 12448.0], [28.2, 12448.0], [28.3, 12448.0], [28.4, 12448.0], [28.5, 12448.0], [28.6, 12448.0], [28.7, 12448.0], [28.8, 12448.0], [28.9, 12448.0], [29.0, 12448.0], [29.1, 12448.0], [29.2, 12448.0], [29.3, 12448.0], [29.4, 12448.0], [29.5, 12448.0], [29.6, 12448.0], [29.7, 12710.0], [29.8, 12710.0], [29.9, 12710.0], [30.0, 12710.0], [30.1, 12710.0], [30.2, 12710.0], [30.3, 12710.0], [30.4, 12710.0], [30.5, 12764.0], [30.6, 12764.0], [30.7, 12764.0], [30.8, 12764.0], [30.9, 12764.0], [31.0, 12764.0], [31.1, 12764.0], [31.2, 12764.0], [31.3, 13011.0], [31.4, 13011.0], [31.5, 13011.0], [31.6, 13011.0], [31.7, 13011.0], [31.8, 13011.0], [31.9, 13011.0], [32.0, 13011.0], [32.1, 13015.0], [32.2, 13015.0], [32.3, 13015.0], [32.4, 13015.0], [32.5, 13015.0], [32.6, 13015.0], [32.7, 13015.0], [32.8, 13015.0], [32.9, 13018.0], [33.0, 13018.0], [33.1, 13018.0], [33.2, 13018.0], [33.3, 13018.0], [33.4, 13018.0], [33.5, 13018.0], [33.6, 13018.0], [33.7, 13070.0], [33.8, 13070.0], [33.9, 13070.0], [34.0, 13070.0], [34.1, 13070.0], [34.2, 13070.0], [34.3, 13070.0], [34.4, 13070.0], [34.5, 13207.0], [34.6, 13207.0], [34.7, 13207.0], [34.8, 13207.0], [34.9, 13207.0], [35.0, 13207.0], [35.1, 13207.0], [35.2, 13673.0], [35.3, 13673.0], [35.4, 13673.0], [35.5, 13673.0], [35.6, 13673.0], [35.7, 13673.0], [35.8, 13673.0], [35.9, 13673.0], [36.0, 13833.0], [36.1, 13833.0], [36.2, 13833.0], [36.3, 13833.0], [36.4, 13833.0], [36.5, 13833.0], [36.6, 13833.0], [36.7, 13833.0], [36.8, 13833.0], [36.9, 13833.0], [37.0, 13833.0], [37.1, 13833.0], [37.2, 13833.0], [37.3, 13833.0], [37.4, 13833.0], [37.5, 13833.0], [37.6, 14040.0], [37.7, 14040.0], [37.8, 14040.0], [37.9, 14040.0], [38.0, 14040.0], [38.1, 14040.0], [38.2, 14040.0], [38.3, 14040.0], [38.4, 14076.0], [38.5, 14076.0], [38.6, 14076.0], [38.7, 14076.0], [38.8, 14076.0], [38.9, 14076.0], [39.0, 14076.0], [39.1, 14076.0], [39.2, 14451.0], [39.3, 14451.0], [39.4, 14451.0], [39.5, 14451.0], [39.6, 14451.0], [39.7, 14451.0], [39.8, 14451.0], [39.9, 14451.0], [40.0, 15111.0], [40.1, 15111.0], [40.2, 15111.0], [40.3, 15111.0], [40.4, 15111.0], [40.5, 15111.0], [40.6, 15111.0], [40.7, 15111.0], [40.8, 15142.0], [40.9, 15142.0], [41.0, 15142.0], [41.1, 15142.0], [41.2, 15142.0], [41.3, 15142.0], [41.4, 15142.0], [41.5, 15142.0], [41.6, 15319.0], [41.7, 15319.0], [41.8, 15319.0], [41.9, 15319.0], [42.0, 15319.0], [42.1, 15319.0], [42.2, 15319.0], [42.3, 15319.0], [42.4, 15360.0], [42.5, 15360.0], [42.6, 15360.0], [42.7, 15360.0], [42.8, 15360.0], [42.9, 15360.0], [43.0, 15360.0], [43.1, 15360.0], [43.2, 15887.0], [43.3, 15887.0], [43.4, 15887.0], [43.5, 15887.0], [43.6, 15887.0], [43.7, 15887.0], [43.8, 15887.0], [43.9, 15887.0], [44.0, 16014.0], [44.1, 16014.0], [44.2, 16014.0], [44.3, 16014.0], [44.4, 16014.0], [44.5, 16014.0], [44.6, 16014.0], [44.7, 16014.0], [44.8, 16122.0], [44.9, 16122.0], [45.0, 16122.0], [45.1, 16122.0], [45.2, 16122.0], [45.3, 16122.0], [45.4, 16122.0], [45.5, 16122.0], [45.6, 16244.0], [45.7, 16244.0], [45.8, 16244.0], [45.9, 16244.0], [46.0, 16244.0], [46.1, 16244.0], [46.2, 16244.0], [46.3, 16244.0], [46.4, 16311.0], [46.5, 16311.0], [46.6, 16311.0], [46.7, 16311.0], [46.8, 16311.0], [46.9, 16311.0], [47.0, 16311.0], [47.1, 16311.0], [47.2, 17122.0], [47.3, 17122.0], [47.4, 17122.0], [47.5, 17122.0], [47.6, 17122.0], [47.7, 17122.0], [47.8, 17122.0], [47.9, 17122.0], [48.0, 17326.0], [48.1, 17326.0], [48.2, 17326.0], [48.3, 17326.0], [48.4, 17326.0], [48.5, 17326.0], [48.6, 17326.0], [48.7, 17326.0], [48.8, 17374.0], [48.9, 17374.0], [49.0, 17374.0], [49.1, 17374.0], [49.2, 17374.0], [49.3, 17374.0], [49.4, 17374.0], [49.5, 17374.0], [49.6, 17512.0], [49.7, 17512.0], [49.8, 17512.0], [49.9, 17512.0], [50.0, 17512.0], [50.1, 17512.0], [50.2, 17512.0], [50.3, 17512.0], [50.4, 17773.0], [50.5, 17773.0], [50.6, 17773.0], [50.7, 17773.0], [50.8, 17773.0], [50.9, 17773.0], [51.0, 17773.0], [51.1, 17773.0], [51.2, 17785.0], [51.3, 17785.0], [51.4, 17785.0], [51.5, 17785.0], [51.6, 17785.0], [51.7, 17785.0], [51.8, 17785.0], [51.9, 17785.0], [52.0, 17830.0], [52.1, 17830.0], [52.2, 17830.0], [52.3, 17830.0], [52.4, 17830.0], [52.5, 17830.0], [52.6, 17830.0], [52.7, 17830.0], [52.8, 18459.0], [52.9, 18459.0], [53.0, 18459.0], [53.1, 18459.0], [53.2, 18459.0], [53.3, 18459.0], [53.4, 18459.0], [53.5, 18459.0], [53.6, 18651.0], [53.7, 18651.0], [53.8, 18651.0], [53.9, 18651.0], [54.0, 18651.0], [54.1, 18651.0], [54.2, 18651.0], [54.3, 18651.0], [54.4, 18773.0], [54.5, 18773.0], [54.6, 18773.0], [54.7, 18773.0], [54.8, 18773.0], [54.9, 18773.0], [55.0, 18773.0], [55.1, 18773.0], [55.2, 18897.0], [55.3, 18897.0], [55.4, 18897.0], [55.5, 18897.0], [55.6, 18897.0], [55.7, 18897.0], [55.8, 18897.0], [55.9, 18897.0], [56.0, 19207.0], [56.1, 19207.0], [56.2, 19207.0], [56.3, 19207.0], [56.4, 19207.0], [56.5, 19207.0], [56.6, 19207.0], [56.7, 19207.0], [56.8, 19455.0], [56.9, 19455.0], [57.0, 19455.0], [57.1, 19455.0], [57.2, 19455.0], [57.3, 19455.0], [57.4, 19455.0], [57.5, 19455.0], [57.6, 19704.0], [57.7, 19704.0], [57.8, 19704.0], [57.9, 19704.0], [58.0, 19704.0], [58.1, 19704.0], [58.2, 19704.0], [58.3, 19704.0], [58.4, 20139.0], [58.5, 20139.0], [58.6, 20139.0], [58.7, 20139.0], [58.8, 20139.0], [58.9, 20139.0], [59.0, 20139.0], [59.1, 20139.0], [59.2, 20299.0], [59.3, 20299.0], [59.4, 20299.0], [59.5, 20299.0], [59.6, 20299.0], [59.7, 20299.0], [59.8, 20299.0], [59.9, 20299.0], [60.0, 20318.0], [60.1, 20318.0], [60.2, 20318.0], [60.3, 20318.0], [60.4, 20318.0], [60.5, 20318.0], [60.6, 20318.0], [60.7, 20318.0], [60.8, 20329.0], [60.9, 20329.0], [61.0, 20329.0], [61.1, 20329.0], [61.2, 20329.0], [61.3, 20329.0], [61.4, 20329.0], [61.5, 20329.0], [61.6, 20460.0], [61.7, 20460.0], [61.8, 20460.0], [61.9, 20460.0], [62.0, 20460.0], [62.1, 20460.0], [62.2, 20460.0], [62.3, 20460.0], [62.4, 20468.0], [62.5, 20468.0], [62.6, 20468.0], [62.7, 20468.0], [62.8, 20468.0], [62.9, 20468.0], [63.0, 20468.0], [63.1, 20468.0], [63.2, 20740.0], [63.3, 20740.0], [63.4, 20740.0], [63.5, 20740.0], [63.6, 20740.0], [63.7, 20740.0], [63.8, 20740.0], [63.9, 20740.0], [64.0, 21210.0], [64.1, 21210.0], [64.2, 21210.0], [64.3, 21210.0], [64.4, 21210.0], [64.5, 21210.0], [64.6, 21210.0], [64.7, 21210.0], [64.8, 21577.0], [64.9, 21577.0], [65.0, 21577.0], [65.1, 21577.0], [65.2, 21577.0], [65.3, 21577.0], [65.4, 21577.0], [65.5, 21577.0], [65.6, 21659.0], [65.7, 21659.0], [65.8, 21659.0], [65.9, 21659.0], [66.0, 21659.0], [66.1, 21659.0], [66.2, 21659.0], [66.3, 21659.0], [66.4, 21674.0], [66.5, 21674.0], [66.6, 21674.0], [66.7, 21674.0], [66.8, 21674.0], [66.9, 21674.0], [67.0, 21674.0], [67.1, 21674.0], [67.2, 21765.0], [67.3, 21765.0], [67.4, 21765.0], [67.5, 21765.0], [67.6, 21765.0], [67.7, 21765.0], [67.8, 21765.0], [67.9, 21765.0], [68.0, 22028.0], [68.1, 22028.0], [68.2, 22028.0], [68.3, 22028.0], [68.4, 22028.0], [68.5, 22028.0], [68.6, 22028.0], [68.7, 22028.0], [68.8, 22235.0], [68.9, 22235.0], [69.0, 22235.0], [69.1, 22235.0], [69.2, 22235.0], [69.3, 22235.0], [69.4, 22235.0], [69.5, 22235.0], [69.6, 22483.0], [69.7, 22483.0], [69.8, 22483.0], [69.9, 22483.0], [70.0, 22483.0], [70.1, 22483.0], [70.2, 22483.0], [70.3, 22483.0], [70.4, 22486.0], [70.5, 22486.0], [70.6, 22486.0], [70.7, 22486.0], [70.8, 22486.0], [70.9, 22486.0], [71.0, 22486.0], [71.1, 22486.0], [71.2, 22712.0], [71.3, 22712.0], [71.4, 22712.0], [71.5, 22712.0], [71.6, 22712.0], [71.7, 22712.0], [71.8, 22712.0], [71.9, 22712.0], [72.0, 22792.0], [72.1, 22792.0], [72.2, 22792.0], [72.3, 22792.0], [72.4, 22792.0], [72.5, 22792.0], [72.6, 22792.0], [72.7, 22792.0], [72.8, 22912.0], [72.9, 22912.0], [73.0, 22912.0], [73.1, 22912.0], [73.2, 22912.0], [73.3, 22912.0], [73.4, 22912.0], [73.5, 22912.0], [73.6, 22979.0], [73.7, 22979.0], [73.8, 22979.0], [73.9, 22979.0], [74.0, 22979.0], [74.1, 22979.0], [74.2, 22979.0], [74.3, 22979.0], [74.4, 22993.0], [74.5, 22993.0], [74.6, 22993.0], [74.7, 22993.0], [74.8, 22993.0], [74.9, 22993.0], [75.0, 22993.0], [75.1, 22993.0], [75.2, 23140.0], [75.3, 23140.0], [75.4, 23140.0], [75.5, 23140.0], [75.6, 23140.0], [75.7, 23140.0], [75.8, 23140.0], [75.9, 23140.0], [76.0, 23362.0], [76.1, 23362.0], [76.2, 23362.0], [76.3, 23362.0], [76.4, 23362.0], [76.5, 23362.0], [76.6, 23362.0], [76.7, 23362.0], [76.8, 23510.0], [76.9, 23510.0], [77.0, 23510.0], [77.1, 23510.0], [77.2, 23510.0], [77.3, 23510.0], [77.4, 23510.0], [77.5, 23510.0], [77.6, 23639.0], [77.7, 23639.0], [77.8, 23639.0], [77.9, 23639.0], [78.0, 23639.0], [78.1, 23639.0], [78.2, 23639.0], [78.3, 23639.0], [78.4, 24247.0], [78.5, 24247.0], [78.6, 24247.0], [78.7, 24247.0], [78.8, 24247.0], [78.9, 24247.0], [79.0, 24247.0], [79.1, 24247.0], [79.2, 24757.0], [79.3, 24757.0], [79.4, 24757.0], [79.5, 24757.0], [79.6, 24757.0], [79.7, 24757.0], [79.8, 24757.0], [79.9, 24757.0], [80.0, 25041.0], [80.1, 25041.0], [80.2, 25041.0], [80.3, 25041.0], [80.4, 25041.0], [80.5, 25041.0], [80.6, 25041.0], [80.7, 25041.0], [80.8, 25093.0], [80.9, 25093.0], [81.0, 25093.0], [81.1, 25093.0], [81.2, 25093.0], [81.3, 25093.0], [81.4, 25093.0], [81.5, 25093.0], [81.6, 25264.0], [81.7, 25264.0], [81.8, 25264.0], [81.9, 25264.0], [82.0, 25264.0], [82.1, 25264.0], [82.2, 25264.0], [82.3, 25264.0], [82.4, 25814.0], [82.5, 25814.0], [82.6, 25814.0], [82.7, 25814.0], [82.8, 25814.0], [82.9, 25814.0], [83.0, 25814.0], [83.1, 25814.0], [83.2, 26477.0], [83.3, 26477.0], [83.4, 26477.0], [83.5, 26477.0], [83.6, 26477.0], [83.7, 26477.0], [83.8, 26477.0], [83.9, 26477.0], [84.0, 26479.0], [84.1, 26479.0], [84.2, 26479.0], [84.3, 26479.0], [84.4, 26479.0], [84.5, 26479.0], [84.6, 26479.0], [84.7, 26479.0], [84.8, 26582.0], [84.9, 26582.0], [85.0, 26582.0], [85.1, 26582.0], [85.2, 26582.0], [85.3, 26582.0], [85.4, 26582.0], [85.5, 26582.0], [85.6, 27153.0], [85.7, 27153.0], [85.8, 27153.0], [85.9, 27153.0], [86.0, 27153.0], [86.1, 27153.0], [86.2, 27153.0], [86.3, 27153.0], [86.4, 27181.0], [86.5, 27181.0], [86.6, 27181.0], [86.7, 27181.0], [86.8, 27181.0], [86.9, 27181.0], [87.0, 27181.0], [87.1, 27181.0], [87.2, 27393.0], [87.3, 27393.0], [87.4, 27393.0], [87.5, 27393.0], [87.6, 27393.0], [87.7, 27393.0], [87.8, 27393.0], [87.9, 27393.0], [88.0, 27789.0], [88.1, 27789.0], [88.2, 27789.0], [88.3, 27789.0], [88.4, 27789.0], [88.5, 27789.0], [88.6, 27789.0], [88.7, 27789.0], [88.8, 27897.0], [88.9, 27897.0], [89.0, 27897.0], [89.1, 27897.0], [89.2, 27897.0], [89.3, 27897.0], [89.4, 27897.0], [89.5, 27897.0], [89.6, 28598.0], [89.7, 28598.0], [89.8, 28598.0], [89.9, 28598.0], [90.0, 28598.0], [90.1, 28598.0], [90.2, 28598.0], [90.3, 28598.0], [90.4, 29663.0], [90.5, 29663.0], [90.6, 29663.0], [90.7, 29663.0], [90.8, 29663.0], [90.9, 29663.0], [91.0, 29663.0], [91.1, 29663.0], [91.2, 30306.0], [91.3, 30306.0], [91.4, 30306.0], [91.5, 30306.0], [91.6, 30306.0], [91.7, 30306.0], [91.8, 30306.0], [91.9, 30306.0], [92.0, 30420.0], [92.1, 30420.0], [92.2, 30420.0], [92.3, 30420.0], [92.4, 30420.0], [92.5, 30420.0], [92.6, 30420.0], [92.7, 30420.0], [92.8, 31093.0], [92.9, 31093.0], [93.0, 31093.0], [93.1, 31093.0], [93.2, 31093.0], [93.3, 31093.0], [93.4, 31093.0], [93.5, 31093.0], [93.6, 31889.0], [93.7, 31889.0], [93.8, 31889.0], [93.9, 31889.0], [94.0, 31889.0], [94.1, 31889.0], [94.2, 31889.0], [94.3, 31889.0], [94.4, 32072.0], [94.5, 32072.0], [94.6, 32072.0], [94.7, 32072.0], [94.8, 32072.0], [94.9, 32072.0], [95.0, 32072.0], [95.1, 32072.0], [95.2, 32163.0], [95.3, 32163.0], [95.4, 32163.0], [95.5, 32163.0], [95.6, 32163.0], [95.7, 32163.0], [95.8, 32163.0], [95.9, 32163.0], [96.0, 32505.0], [96.1, 32505.0], [96.2, 32505.0], [96.3, 32505.0], [96.4, 32505.0], [96.5, 32505.0], [96.6, 32505.0], [96.7, 32505.0], [96.8, 35222.0], [96.9, 35222.0], [97.0, 35222.0], [97.1, 35222.0], [97.2, 35222.0], [97.3, 35222.0], [97.4, 35222.0], [97.5, 35222.0], [97.6, 35528.0], [97.7, 35528.0], [97.8, 35528.0], [97.9, 35528.0], [98.0, 35528.0], [98.1, 35528.0], [98.2, 35528.0], [98.3, 35528.0], [98.4, 35824.0], [98.5, 35824.0], [98.6, 35824.0], [98.7, 35824.0], [98.8, 35824.0], [98.9, 35824.0], [99.0, 35824.0], [99.1, 35824.0], [99.2, 38583.0], [99.3, 38583.0], [99.4, 38583.0], [99.5, 38583.0], [99.6, 38583.0], [99.7, 38583.0], [99.8, 38583.0], [99.9, 38583.0]], "isOverall": false, "label": "Request Wafilife_Book", "isController": false}, {"data": [[0.0, 1013.0], [0.1, 1013.0], [0.2, 1013.0], [0.3, 1013.0], [0.4, 1013.0], [0.5, 1013.0], [0.6, 1013.0], [0.7, 1013.0], [0.8, 1092.0], [0.9, 1092.0], [1.0, 1092.0], [1.1, 1092.0], [1.2, 1092.0], [1.3, 1092.0], [1.4, 1092.0], [1.5, 1092.0], [1.6, 2936.0], [1.7, 2936.0], [1.8, 2936.0], [1.9, 2936.0], [2.0, 2936.0], [2.1, 2936.0], [2.2, 2936.0], [2.3, 2936.0], [2.4, 2936.0], [2.5, 3135.0], [2.6, 3135.0], [2.7, 3135.0], [2.8, 3135.0], [2.9, 3135.0], [3.0, 3135.0], [3.1, 3135.0], [3.2, 3477.0], [3.3, 3477.0], [3.4, 3477.0], [3.5, 3477.0], [3.6, 3477.0], [3.7, 3477.0], [3.8, 3477.0], [3.9, 3477.0], [4.0, 3759.0], [4.1, 3759.0], [4.2, 3759.0], [4.3, 3759.0], [4.4, 3759.0], [4.5, 3759.0], [4.6, 3759.0], [4.7, 3759.0], [4.8, 3928.0], [4.9, 3928.0], [5.0, 3928.0], [5.1, 3928.0], [5.2, 3928.0], [5.3, 3928.0], [5.4, 3928.0], [5.5, 3928.0], [5.6, 3964.0], [5.7, 3964.0], [5.8, 3964.0], [5.9, 3964.0], [6.0, 3964.0], [6.1, 3964.0], [6.2, 3964.0], [6.3, 3964.0], [6.4, 4071.0], [6.5, 4071.0], [6.6, 4071.0], [6.7, 4071.0], [6.8, 4071.0], [6.9, 4071.0], [7.0, 4071.0], [7.1, 4071.0], [7.2, 4385.0], [7.3, 4385.0], [7.4, 4385.0], [7.5, 4385.0], [7.6, 4385.0], [7.7, 4385.0], [7.8, 4385.0], [7.9, 4385.0], [8.0, 4716.0], [8.1, 4716.0], [8.2, 4716.0], [8.3, 4716.0], [8.4, 4716.0], [8.5, 4716.0], [8.6, 4716.0], [8.7, 4716.0], [8.8, 4922.0], [8.9, 4922.0], [9.0, 4922.0], [9.1, 4922.0], [9.2, 4922.0], [9.3, 4922.0], [9.4, 4922.0], [9.5, 4922.0], [9.6, 5040.0], [9.7, 5040.0], [9.8, 5040.0], [9.9, 5040.0], [10.0, 5040.0], [10.1, 5040.0], [10.2, 5040.0], [10.3, 5040.0], [10.4, 5076.0], [10.5, 5076.0], [10.6, 5076.0], [10.7, 5076.0], [10.8, 5076.0], [10.9, 5076.0], [11.0, 5076.0], [11.1, 5076.0], [11.2, 5076.0], [11.3, 5106.0], [11.4, 5106.0], [11.5, 5106.0], [11.6, 5106.0], [11.7, 5106.0], [11.8, 5106.0], [11.9, 5106.0], [12.0, 5106.0], [12.1, 5445.0], [12.2, 5445.0], [12.3, 5445.0], [12.4, 5445.0], [12.5, 5445.0], [12.6, 5445.0], [12.7, 5445.0], [12.8, 5445.0], [12.9, 5502.0], [13.0, 5502.0], [13.1, 5502.0], [13.2, 5502.0], [13.3, 5502.0], [13.4, 5502.0], [13.5, 5502.0], [13.6, 5502.0], [13.7, 5523.0], [13.8, 5523.0], [13.9, 5523.0], [14.0, 5523.0], [14.1, 5523.0], [14.2, 5523.0], [14.3, 5523.0], [14.4, 5523.0], [14.5, 5675.0], [14.6, 5675.0], [14.7, 5675.0], [14.8, 5675.0], [14.9, 5675.0], [15.0, 5675.0], [15.1, 5675.0], [15.2, 5675.0], [15.3, 5694.0], [15.4, 5694.0], [15.5, 5694.0], [15.6, 5694.0], [15.7, 5694.0], [15.8, 5694.0], [15.9, 5694.0], [16.0, 5694.0], [16.1, 5711.0], [16.2, 5711.0], [16.3, 5711.0], [16.4, 5711.0], [16.5, 5711.0], [16.6, 5711.0], [16.7, 5711.0], [16.8, 5711.0], [16.9, 5877.0], [17.0, 5877.0], [17.1, 5877.0], [17.2, 5877.0], [17.3, 5877.0], [17.4, 5877.0], [17.5, 5877.0], [17.6, 5877.0], [17.7, 5903.0], [17.8, 5903.0], [17.9, 5903.0], [18.0, 5903.0], [18.1, 5903.0], [18.2, 5903.0], [18.3, 5903.0], [18.4, 5903.0], [18.5, 5992.0], [18.6, 5992.0], [18.7, 5992.0], [18.8, 5992.0], [18.9, 5992.0], [19.0, 5992.0], [19.1, 5992.0], [19.2, 5992.0], [19.3, 6013.0], [19.4, 6013.0], [19.5, 6013.0], [19.6, 6013.0], [19.7, 6013.0], [19.8, 6013.0], [19.9, 6013.0], [20.0, 6013.0], [20.1, 6052.0], [20.2, 6052.0], [20.3, 6052.0], [20.4, 6052.0], [20.5, 6052.0], [20.6, 6052.0], [20.7, 6052.0], [20.8, 6052.0], [20.9, 6441.0], [21.0, 6441.0], [21.1, 6441.0], [21.2, 6441.0], [21.3, 6441.0], [21.4, 6441.0], [21.5, 6441.0], [21.6, 6441.0], [21.7, 6509.0], [21.8, 6509.0], [21.9, 6509.0], [22.0, 6509.0], [22.1, 6509.0], [22.2, 6509.0], [22.3, 6509.0], [22.4, 6509.0], [22.5, 6587.0], [22.6, 6587.0], [22.7, 6587.0], [22.8, 6587.0], [22.9, 6587.0], [23.0, 6587.0], [23.1, 6587.0], [23.2, 6587.0], [23.3, 6592.0], [23.4, 6592.0], [23.5, 6592.0], [23.6, 6592.0], [23.7, 6592.0], [23.8, 6592.0], [23.9, 6592.0], [24.0, 6592.0], [24.1, 6611.0], [24.2, 6611.0], [24.3, 6611.0], [24.4, 6611.0], [24.5, 6611.0], [24.6, 6611.0], [24.7, 6611.0], [24.8, 6611.0], [24.9, 6873.0], [25.0, 6873.0], [25.1, 6873.0], [25.2, 6873.0], [25.3, 6873.0], [25.4, 6873.0], [25.5, 6873.0], [25.6, 6873.0], [25.7, 6902.0], [25.8, 6902.0], [25.9, 6902.0], [26.0, 6902.0], [26.1, 6902.0], [26.2, 6902.0], [26.3, 6902.0], [26.4, 6902.0], [26.5, 7012.0], [26.6, 7012.0], [26.7, 7012.0], [26.8, 7012.0], [26.9, 7012.0], [27.0, 7012.0], [27.1, 7012.0], [27.2, 7012.0], [27.3, 7034.0], [27.4, 7034.0], [27.5, 7034.0], [27.6, 7034.0], [27.7, 7034.0], [27.8, 7034.0], [27.9, 7034.0], [28.0, 7034.0], [28.1, 7152.0], [28.2, 7152.0], [28.3, 7152.0], [28.4, 7152.0], [28.5, 7152.0], [28.6, 7152.0], [28.7, 7152.0], [28.8, 7152.0], [28.9, 7348.0], [29.0, 7348.0], [29.1, 7348.0], [29.2, 7348.0], [29.3, 7348.0], [29.4, 7348.0], [29.5, 7348.0], [29.6, 7348.0], [29.7, 7396.0], [29.8, 7396.0], [29.9, 7396.0], [30.0, 7396.0], [30.1, 7396.0], [30.2, 7396.0], [30.3, 7396.0], [30.4, 7396.0], [30.5, 7467.0], [30.6, 7467.0], [30.7, 7467.0], [30.8, 7467.0], [30.9, 7467.0], [31.0, 7467.0], [31.1, 7467.0], [31.2, 7467.0], [31.3, 7498.0], [31.4, 7498.0], [31.5, 7498.0], [31.6, 7498.0], [31.7, 7498.0], [31.8, 7498.0], [31.9, 7498.0], [32.0, 7498.0], [32.1, 7847.0], [32.2, 7847.0], [32.3, 7847.0], [32.4, 7847.0], [32.5, 7847.0], [32.6, 7847.0], [32.7, 7847.0], [32.8, 7847.0], [32.9, 7935.0], [33.0, 7935.0], [33.1, 7935.0], [33.2, 7935.0], [33.3, 7935.0], [33.4, 7935.0], [33.5, 7935.0], [33.6, 7935.0], [33.7, 8274.0], [33.8, 8274.0], [33.9, 8274.0], [34.0, 8274.0], [34.1, 8274.0], [34.2, 8274.0], [34.3, 8274.0], [34.4, 8274.0], [34.5, 8410.0], [34.6, 8410.0], [34.7, 8410.0], [34.8, 8410.0], [34.9, 8410.0], [35.0, 8410.0], [35.1, 8410.0], [35.2, 8507.0], [35.3, 8507.0], [35.4, 8507.0], [35.5, 8507.0], [35.6, 8507.0], [35.7, 8507.0], [35.8, 8507.0], [35.9, 8507.0], [36.0, 8598.0], [36.1, 8598.0], [36.2, 8598.0], [36.3, 8598.0], [36.4, 8598.0], [36.5, 8598.0], [36.6, 8598.0], [36.7, 8598.0], [36.8, 8629.0], [36.9, 8629.0], [37.0, 8629.0], [37.1, 8629.0], [37.2, 8629.0], [37.3, 8629.0], [37.4, 8629.0], [37.5, 8629.0], [37.6, 8816.0], [37.7, 8816.0], [37.8, 8816.0], [37.9, 8816.0], [38.0, 8816.0], [38.1, 8816.0], [38.2, 8816.0], [38.3, 8816.0], [38.4, 8853.0], [38.5, 8853.0], [38.6, 8853.0], [38.7, 8853.0], [38.8, 8853.0], [38.9, 8853.0], [39.0, 8853.0], [39.1, 8853.0], [39.2, 8988.0], [39.3, 8988.0], [39.4, 8988.0], [39.5, 8988.0], [39.6, 8988.0], [39.7, 8988.0], [39.8, 8988.0], [39.9, 8988.0], [40.0, 9091.0], [40.1, 9091.0], [40.2, 9091.0], [40.3, 9091.0], [40.4, 9091.0], [40.5, 9091.0], [40.6, 9091.0], [40.7, 9091.0], [40.8, 9499.0], [40.9, 9499.0], [41.0, 9499.0], [41.1, 9499.0], [41.2, 9499.0], [41.3, 9499.0], [41.4, 9499.0], [41.5, 9499.0], [41.6, 9628.0], [41.7, 9628.0], [41.8, 9628.0], [41.9, 9628.0], [42.0, 9628.0], [42.1, 9628.0], [42.2, 9628.0], [42.3, 9628.0], [42.4, 10083.0], [42.5, 10083.0], [42.6, 10083.0], [42.7, 10083.0], [42.8, 10083.0], [42.9, 10083.0], [43.0, 10083.0], [43.1, 10083.0], [43.2, 10144.0], [43.3, 10144.0], [43.4, 10144.0], [43.5, 10144.0], [43.6, 10144.0], [43.7, 10144.0], [43.8, 10144.0], [43.9, 10144.0], [44.0, 10367.0], [44.1, 10367.0], [44.2, 10367.0], [44.3, 10367.0], [44.4, 10367.0], [44.5, 10367.0], [44.6, 10367.0], [44.7, 10367.0], [44.8, 10386.0], [44.9, 10386.0], [45.0, 10386.0], [45.1, 10386.0], [45.2, 10386.0], [45.3, 10386.0], [45.4, 10386.0], [45.5, 10386.0], [45.6, 10525.0], [45.7, 10525.0], [45.8, 10525.0], [45.9, 10525.0], [46.0, 10525.0], [46.1, 10525.0], [46.2, 10525.0], [46.3, 10525.0], [46.4, 10586.0], [46.5, 10586.0], [46.6, 10586.0], [46.7, 10586.0], [46.8, 10586.0], [46.9, 10586.0], [47.0, 10586.0], [47.1, 10586.0], [47.2, 10988.0], [47.3, 10988.0], [47.4, 10988.0], [47.5, 10988.0], [47.6, 10988.0], [47.7, 10988.0], [47.8, 10988.0], [47.9, 10988.0], [48.0, 11057.0], [48.1, 11057.0], [48.2, 11057.0], [48.3, 11057.0], [48.4, 11057.0], [48.5, 11057.0], [48.6, 11057.0], [48.7, 11057.0], [48.8, 11201.0], [48.9, 11201.0], [49.0, 11201.0], [49.1, 11201.0], [49.2, 11201.0], [49.3, 11201.0], [49.4, 11201.0], [49.5, 11201.0], [49.6, 11408.0], [49.7, 11408.0], [49.8, 11408.0], [49.9, 11408.0], [50.0, 11408.0], [50.1, 11408.0], [50.2, 11408.0], [50.3, 11408.0], [50.4, 11449.0], [50.5, 11449.0], [50.6, 11449.0], [50.7, 11449.0], [50.8, 11449.0], [50.9, 11449.0], [51.0, 11449.0], [51.1, 11449.0], [51.2, 11496.0], [51.3, 11496.0], [51.4, 11496.0], [51.5, 11496.0], [51.6, 11496.0], [51.7, 11496.0], [51.8, 11496.0], [51.9, 11496.0], [52.0, 12429.0], [52.1, 12429.0], [52.2, 12429.0], [52.3, 12429.0], [52.4, 12429.0], [52.5, 12429.0], [52.6, 12429.0], [52.7, 12429.0], [52.8, 12555.0], [52.9, 12555.0], [53.0, 12555.0], [53.1, 12555.0], [53.2, 12555.0], [53.3, 12555.0], [53.4, 12555.0], [53.5, 12555.0], [53.6, 12646.0], [53.7, 12646.0], [53.8, 12646.0], [53.9, 12646.0], [54.0, 12646.0], [54.1, 12646.0], [54.2, 12646.0], [54.3, 12646.0], [54.4, 12682.0], [54.5, 12682.0], [54.6, 12682.0], [54.7, 12682.0], [54.8, 12682.0], [54.9, 12682.0], [55.0, 12682.0], [55.1, 12682.0], [55.2, 12745.0], [55.3, 12745.0], [55.4, 12745.0], [55.5, 12745.0], [55.6, 12745.0], [55.7, 12745.0], [55.8, 12745.0], [55.9, 12745.0], [56.0, 13072.0], [56.1, 13072.0], [56.2, 13072.0], [56.3, 13072.0], [56.4, 13072.0], [56.5, 13072.0], [56.6, 13072.0], [56.7, 13072.0], [56.8, 13234.0], [56.9, 13234.0], [57.0, 13234.0], [57.1, 13234.0], [57.2, 13234.0], [57.3, 13234.0], [57.4, 13234.0], [57.5, 13234.0], [57.6, 13654.0], [57.7, 13654.0], [57.8, 13654.0], [57.9, 13654.0], [58.0, 13654.0], [58.1, 13654.0], [58.2, 13654.0], [58.3, 13654.0], [58.4, 14115.0], [58.5, 14115.0], [58.6, 14115.0], [58.7, 14115.0], [58.8, 14115.0], [58.9, 14115.0], [59.0, 14115.0], [59.1, 14115.0], [59.2, 14149.0], [59.3, 14149.0], [59.4, 14149.0], [59.5, 14149.0], [59.6, 14149.0], [59.7, 14149.0], [59.8, 14149.0], [59.9, 14149.0], [60.0, 14276.0], [60.1, 14276.0], [60.2, 14276.0], [60.3, 14276.0], [60.4, 14276.0], [60.5, 14276.0], [60.6, 14276.0], [60.7, 14276.0], [60.8, 14709.0], [60.9, 14709.0], [61.0, 14709.0], [61.1, 14709.0], [61.2, 14709.0], [61.3, 14709.0], [61.4, 14709.0], [61.5, 14709.0], [61.6, 15204.0], [61.7, 15204.0], [61.8, 15204.0], [61.9, 15204.0], [62.0, 15204.0], [62.1, 15204.0], [62.2, 15204.0], [62.3, 15204.0], [62.4, 15499.0], [62.5, 15499.0], [62.6, 15499.0], [62.7, 15499.0], [62.8, 15499.0], [62.9, 15499.0], [63.0, 15499.0], [63.1, 15499.0], [63.2, 15530.0], [63.3, 15530.0], [63.4, 15530.0], [63.5, 15530.0], [63.6, 15530.0], [63.7, 15530.0], [63.8, 15530.0], [63.9, 15530.0], [64.0, 15957.0], [64.1, 15957.0], [64.2, 15957.0], [64.3, 15957.0], [64.4, 15957.0], [64.5, 15957.0], [64.6, 15957.0], [64.7, 15957.0], [64.8, 16699.0], [64.9, 16699.0], [65.0, 16699.0], [65.1, 16699.0], [65.2, 16699.0], [65.3, 16699.0], [65.4, 16699.0], [65.5, 16699.0], [65.6, 16806.0], [65.7, 16806.0], [65.8, 16806.0], [65.9, 16806.0], [66.0, 16806.0], [66.1, 16806.0], [66.2, 16806.0], [66.3, 16806.0], [66.4, 16806.0], [66.5, 16806.0], [66.6, 16806.0], [66.7, 16806.0], [66.8, 16806.0], [66.9, 16806.0], [67.0, 16806.0], [67.1, 16806.0], [67.2, 16818.0], [67.3, 16818.0], [67.4, 16818.0], [67.5, 16818.0], [67.6, 16818.0], [67.7, 16818.0], [67.8, 16818.0], [67.9, 16818.0], [68.0, 17095.0], [68.1, 17095.0], [68.2, 17095.0], [68.3, 17095.0], [68.4, 17095.0], [68.5, 17095.0], [68.6, 17095.0], [68.7, 17095.0], [68.8, 17339.0], [68.9, 17339.0], [69.0, 17339.0], [69.1, 17339.0], [69.2, 17339.0], [69.3, 17339.0], [69.4, 17339.0], [69.5, 17339.0], [69.6, 17568.0], [69.7, 17568.0], [69.8, 17568.0], [69.9, 17568.0], [70.0, 17568.0], [70.1, 17568.0], [70.2, 17568.0], [70.3, 17568.0], [70.4, 17731.0], [70.5, 17731.0], [70.6, 17731.0], [70.7, 17731.0], [70.8, 17731.0], [70.9, 17731.0], [71.0, 17731.0], [71.1, 17731.0], [71.2, 17894.0], [71.3, 17894.0], [71.4, 17894.0], [71.5, 17894.0], [71.6, 17894.0], [71.7, 17894.0], [71.8, 17894.0], [71.9, 17894.0], [72.0, 18451.0], [72.1, 18451.0], [72.2, 18451.0], [72.3, 18451.0], [72.4, 18451.0], [72.5, 18451.0], [72.6, 18451.0], [72.7, 18451.0], [72.8, 19121.0], [72.9, 19121.0], [73.0, 19121.0], [73.1, 19121.0], [73.2, 19121.0], [73.3, 19121.0], [73.4, 19121.0], [73.5, 19121.0], [73.6, 19569.0], [73.7, 19569.0], [73.8, 19569.0], [73.9, 19569.0], [74.0, 19569.0], [74.1, 19569.0], [74.2, 19569.0], [74.3, 19569.0], [74.4, 20068.0], [74.5, 20068.0], [74.6, 20068.0], [74.7, 20068.0], [74.8, 20068.0], [74.9, 20068.0], [75.0, 20068.0], [75.1, 20068.0], [75.2, 20710.0], [75.3, 20710.0], [75.4, 20710.0], [75.5, 20710.0], [75.6, 20710.0], [75.7, 20710.0], [75.8, 20710.0], [75.9, 20710.0], [76.0, 21580.0], [76.1, 21580.0], [76.2, 21580.0], [76.3, 21580.0], [76.4, 21580.0], [76.5, 21580.0], [76.6, 21580.0], [76.7, 21580.0], [76.8, 21755.0], [76.9, 21755.0], [77.0, 21755.0], [77.1, 21755.0], [77.2, 21755.0], [77.3, 21755.0], [77.4, 21755.0], [77.5, 21755.0], [77.6, 21758.0], [77.7, 21758.0], [77.8, 21758.0], [77.9, 21758.0], [78.0, 21758.0], [78.1, 21758.0], [78.2, 21758.0], [78.3, 21758.0], [78.4, 22394.0], [78.5, 22394.0], [78.6, 22394.0], [78.7, 22394.0], [78.8, 22394.0], [78.9, 22394.0], [79.0, 22394.0], [79.1, 22394.0], [79.2, 24348.0], [79.3, 24348.0], [79.4, 24348.0], [79.5, 24348.0], [79.6, 24348.0], [79.7, 24348.0], [79.8, 24348.0], [79.9, 24348.0], [80.0, 24421.0], [80.1, 24421.0], [80.2, 24421.0], [80.3, 24421.0], [80.4, 24421.0], [80.5, 24421.0], [80.6, 24421.0], [80.7, 24421.0], [80.8, 25506.0], [80.9, 25506.0], [81.0, 25506.0], [81.1, 25506.0], [81.2, 25506.0], [81.3, 25506.0], [81.4, 25506.0], [81.5, 25506.0], [81.6, 25733.0], [81.7, 25733.0], [81.8, 25733.0], [81.9, 25733.0], [82.0, 25733.0], [82.1, 25733.0], [82.2, 25733.0], [82.3, 25733.0], [82.4, 26717.0], [82.5, 26717.0], [82.6, 26717.0], [82.7, 26717.0], [82.8, 26717.0], [82.9, 26717.0], [83.0, 26717.0], [83.1, 26717.0], [83.2, 27028.0], [83.3, 27028.0], [83.4, 27028.0], [83.5, 27028.0], [83.6, 27028.0], [83.7, 27028.0], [83.8, 27028.0], [83.9, 27028.0], [84.0, 27984.0], [84.1, 27984.0], [84.2, 27984.0], [84.3, 27984.0], [84.4, 27984.0], [84.5, 27984.0], [84.6, 27984.0], [84.7, 27984.0], [84.8, 29106.0], [84.9, 29106.0], [85.0, 29106.0], [85.1, 29106.0], [85.2, 29106.0], [85.3, 29106.0], [85.4, 29106.0], [85.5, 29106.0], [85.6, 29527.0], [85.7, 29527.0], [85.8, 29527.0], [85.9, 29527.0], [86.0, 29527.0], [86.1, 29527.0], [86.2, 29527.0], [86.3, 29527.0], [86.4, 30349.0], [86.5, 30349.0], [86.6, 30349.0], [86.7, 30349.0], [86.8, 30349.0], [86.9, 30349.0], [87.0, 30349.0], [87.1, 30349.0], [87.2, 30510.0], [87.3, 30510.0], [87.4, 30510.0], [87.5, 30510.0], [87.6, 30510.0], [87.7, 30510.0], [87.8, 30510.0], [87.9, 30510.0], [88.0, 31983.0], [88.1, 31983.0], [88.2, 31983.0], [88.3, 31983.0], [88.4, 31983.0], [88.5, 31983.0], [88.6, 31983.0], [88.7, 31983.0], [88.8, 32195.0], [88.9, 32195.0], [89.0, 32195.0], [89.1, 32195.0], [89.2, 32195.0], [89.3, 32195.0], [89.4, 32195.0], [89.5, 32195.0], [89.6, 32479.0], [89.7, 32479.0], [89.8, 32479.0], [89.9, 32479.0], [90.0, 32479.0], [90.1, 32479.0], [90.2, 32479.0], [90.3, 32479.0], [90.4, 35144.0], [90.5, 35144.0], [90.6, 35144.0], [90.7, 35144.0], [90.8, 35144.0], [90.9, 35144.0], [91.0, 35144.0], [91.1, 35144.0], [91.2, 35410.0], [91.3, 35410.0], [91.4, 35410.0], [91.5, 35410.0], [91.6, 35410.0], [91.7, 35410.0], [91.8, 35410.0], [91.9, 35410.0], [92.0, 37264.0], [92.1, 37264.0], [92.2, 37264.0], [92.3, 37264.0], [92.4, 37264.0], [92.5, 37264.0], [92.6, 37264.0], [92.7, 37264.0], [92.8, 38605.0], [92.9, 38605.0], [93.0, 38605.0], [93.1, 38605.0], [93.2, 38605.0], [93.3, 38605.0], [93.4, 38605.0], [93.5, 38605.0], [93.6, 40348.0], [93.7, 40348.0], [93.8, 40348.0], [93.9, 40348.0], [94.0, 40348.0], [94.1, 40348.0], [94.2, 40348.0], [94.3, 40348.0], [94.4, 40380.0], [94.5, 40380.0], [94.6, 40380.0], [94.7, 40380.0], [94.8, 40380.0], [94.9, 40380.0], [95.0, 40380.0], [95.1, 40380.0], [95.2, 40688.0], [95.3, 40688.0], [95.4, 40688.0], [95.5, 40688.0], [95.6, 40688.0], [95.7, 40688.0], [95.8, 40688.0], [95.9, 40688.0], [96.0, 40772.0], [96.1, 40772.0], [96.2, 40772.0], [96.3, 40772.0], [96.4, 40772.0], [96.5, 40772.0], [96.6, 40772.0], [96.7, 40772.0], [96.8, 41816.0], [96.9, 41816.0], [97.0, 41816.0], [97.1, 41816.0], [97.2, 41816.0], [97.3, 41816.0], [97.4, 41816.0], [97.5, 41816.0], [97.6, 42549.0], [97.7, 42549.0], [97.8, 42549.0], [97.9, 42549.0], [98.0, 42549.0], [98.1, 42549.0], [98.2, 42549.0], [98.3, 42549.0], [98.4, 44718.0], [98.5, 44718.0], [98.6, 44718.0], [98.7, 44718.0], [98.8, 44718.0], [98.9, 44718.0], [99.0, 44718.0], [99.1, 44718.0], [99.2, 49947.0], [99.3, 49947.0], [99.4, 49947.0], [99.5, 49947.0], [99.6, 49947.0], [99.7, 49947.0], [99.8, 49947.0], [99.9, 49947.0]], "isOverall": false, "label": "Request Wafilife", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 23.0, "series": [{"data": [[2200.0, 2.0], [9100.0, 1.0], [600.0, 4.0], [2500.0, 1.0], [700.0, 8.0], [2700.0, 1.0], [2900.0, 1.0], [800.0, 4.0], [200.0, 23.0], [900.0, 6.0], [4000.0, 1.0], [1000.0, 1.0], [1100.0, 2.0], [300.0, 19.0], [1300.0, 2.0], [400.0, 20.0], [1600.0, 1.0], [100.0, 12.0], [1700.0, 2.0], [500.0, 14.0]], "isOverall": false, "label": "Request Writer", "isController": false}, {"data": [[35500.0, 1.0], [38500.0, 1.0], [700.0, 1.0], [1400.0, 1.0], [2000.0, 1.0], [2300.0, 1.0], [2500.0, 1.0], [3300.0, 1.0], [3600.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4700.0, 1.0], [5300.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [6900.0, 1.0], [6800.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [8400.0, 1.0], [8900.0, 1.0], [9300.0, 1.0], [10200.0, 3.0], [9800.0, 1.0], [10400.0, 1.0], [10700.0, 1.0], [10600.0, 1.0], [10300.0, 1.0], [10800.0, 1.0], [11000.0, 1.0], [12000.0, 2.0], [12200.0, 1.0], [12700.0, 2.0], [12300.0, 1.0], [12400.0, 2.0], [13000.0, 4.0], [13200.0, 1.0], [13800.0, 2.0], [13600.0, 1.0], [14000.0, 2.0], [14400.0, 1.0], [15300.0, 2.0], [15100.0, 2.0], [15800.0, 1.0], [16200.0, 1.0], [16000.0, 1.0], [16300.0, 1.0], [16100.0, 1.0], [17300.0, 2.0], [17100.0, 1.0], [17700.0, 2.0], [17500.0, 1.0], [18400.0, 1.0], [17800.0, 1.0], [18700.0, 1.0], [19400.0, 1.0], [18600.0, 1.0], [18800.0, 1.0], [19200.0, 1.0], [20300.0, 2.0], [19700.0, 1.0], [20100.0, 1.0], [20400.0, 2.0], [20200.0, 1.0], [21200.0, 1.0], [20700.0, 1.0], [21500.0, 1.0], [21600.0, 2.0], [22400.0, 2.0], [21700.0, 1.0], [22000.0, 1.0], [22200.0, 1.0], [23500.0, 1.0], [23300.0, 1.0], [22700.0, 2.0], [22900.0, 3.0], [23100.0, 1.0], [24200.0, 1.0], [23600.0, 1.0], [25000.0, 2.0], [24700.0, 1.0], [25200.0, 1.0], [26400.0, 2.0], [26500.0, 1.0], [25800.0, 1.0], [27100.0, 2.0], [27300.0, 1.0], [27800.0, 1.0], [28500.0, 1.0], [27700.0, 1.0], [29600.0, 1.0], [30400.0, 1.0], [30300.0, 1.0], [31000.0, 1.0], [32000.0, 1.0], [32500.0, 1.0], [31800.0, 1.0], [32100.0, 1.0], [35800.0, 1.0], [35200.0, 1.0]], "isOverall": false, "label": "Request Wafilife_Book", "isController": false}, {"data": [[35100.0, 1.0], [40700.0, 1.0], [40300.0, 2.0], [42500.0, 1.0], [44700.0, 1.0], [49900.0, 1.0], [1000.0, 2.0], [2900.0, 1.0], [3100.0, 1.0], [3400.0, 1.0], [3700.0, 1.0], [3900.0, 2.0], [4000.0, 1.0], [4300.0, 1.0], [4700.0, 1.0], [5100.0, 1.0], [4900.0, 1.0], [5000.0, 2.0], [5600.0, 2.0], [5500.0, 2.0], [5400.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [5900.0, 2.0], [6000.0, 2.0], [6500.0, 3.0], [6600.0, 1.0], [6400.0, 1.0], [6800.0, 1.0], [6900.0, 1.0], [7000.0, 2.0], [7100.0, 1.0], [7400.0, 2.0], [7300.0, 2.0], [7900.0, 1.0], [7800.0, 1.0], [8500.0, 2.0], [8200.0, 1.0], [8400.0, 1.0], [8600.0, 1.0], [8800.0, 2.0], [8900.0, 1.0], [9000.0, 1.0], [9600.0, 1.0], [9400.0, 1.0], [10000.0, 1.0], [10100.0, 1.0], [10300.0, 2.0], [10500.0, 2.0], [11000.0, 1.0], [10900.0, 1.0], [11200.0, 1.0], [11400.0, 3.0], [12500.0, 1.0], [12600.0, 2.0], [12400.0, 1.0], [12700.0, 1.0], [13200.0, 1.0], [13000.0, 1.0], [13600.0, 1.0], [14200.0, 1.0], [14100.0, 2.0], [14700.0, 1.0], [15200.0, 1.0], [15500.0, 1.0], [15400.0, 1.0], [15900.0, 1.0], [16800.0, 3.0], [17000.0, 1.0], [17300.0, 1.0], [16600.0, 1.0], [17500.0, 1.0], [17700.0, 1.0], [18400.0, 1.0], [17800.0, 1.0], [19100.0, 1.0], [19500.0, 1.0], [20000.0, 1.0], [20700.0, 1.0], [21500.0, 1.0], [22300.0, 1.0], [21700.0, 2.0], [24300.0, 1.0], [24400.0, 1.0], [25500.0, 1.0], [25700.0, 1.0], [27000.0, 1.0], [26700.0, 1.0], [27900.0, 1.0], [29500.0, 1.0], [29100.0, 1.0], [30500.0, 1.0], [30300.0, 1.0], [32100.0, 1.0], [31900.0, 1.0], [32400.0, 1.0], [35400.0, 1.0], [37200.0, 1.0], [38600.0, 1.0], [40600.0, 1.0], [41800.0, 1.0]], "isOverall": false, "label": "Request Wafilife", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 49900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 255.0, "series": [{"data": [[0.0, 74.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 45.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 255.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 41.39766081871346, "minX": 1.63810674E12, "maxY": 109.05882352941174, "series": [{"data": [[1.6381068E12, 41.39766081871346], [1.63810674E12, 109.05882352941174]], "isOverall": false, "label": "User", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6381068E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 109.0, "minX": 1.0, "maxY": 49947.0, "series": [{"data": [[2.0, 149.0], [3.0, 114.0], [4.0, 138.0], [5.0, 109.0], [6.0, 134.0], [7.0, 154.0], [8.0, 120.0], [9.0, 180.0], [10.0, 131.0], [11.0, 245.0], [12.0, 205.0], [13.0, 221.0], [14.0, 195.0], [15.0, 279.0], [16.0, 308.0], [17.0, 183.0], [18.0, 322.0], [19.0, 242.0], [20.0, 243.0], [21.0, 476.0], [22.0, 529.0], [23.0, 376.0], [24.0, 536.0], [25.0, 905.0], [26.0, 407.0], [27.0, 279.0], [28.0, 313.0], [29.0, 224.0], [30.0, 283.0], [31.0, 364.0], [33.0, 973.0], [32.0, 364.0], [35.0, 1795.0], [34.0, 564.0], [37.0, 448.0], [36.0, 805.0], [39.0, 337.0], [38.0, 417.0], [41.0, 335.0], [40.0, 771.0], [43.0, 333.0], [42.0, 457.0], [45.0, 1068.0], [44.0, 268.0], [47.0, 341.0], [46.0, 225.0], [49.0, 2756.0], [48.0, 335.0], [51.0, 443.0], [50.0, 550.0], [53.0, 312.0], [52.0, 275.0], [55.0, 332.0], [54.0, 290.0], [57.0, 418.0], [56.0, 351.0], [59.0, 928.0], [61.0, 403.0], [60.0, 779.0], [63.0, 485.0], [62.0, 1308.0], [67.0, 636.0], [66.0, 234.0], [65.0, 261.0], [64.0, 9153.0], [71.0, 871.0], [70.0, 200.0], [69.0, 342.0], [68.0, 376.0], [75.0, 550.0], [74.0, 776.0], [73.0, 542.0], [72.0, 799.0], [79.0, 4039.0], [78.0, 493.0], [77.0, 2933.0], [76.0, 855.0], [83.0, 222.0], [82.0, 542.0], [81.0, 464.0], [80.0, 375.0], [87.0, 552.0], [86.0, 254.0], [85.0, 448.0], [84.0, 332.0], [91.0, 421.0], [90.0, 1160.0], [89.0, 220.0], [88.0, 559.0], [95.0, 2272.0], [94.0, 259.0], [93.0, 261.0], [92.0, 1336.0], [99.0, 1654.0], [98.0, 403.0], [97.0, 293.0], [96.0, 256.0], [103.0, 550.0], [102.0, 484.0], [101.0, 976.0], [100.0, 2259.0], [107.0, 1700.0], [106.0, 755.0], [105.0, 560.0], [104.0, 539.0], [111.0, 829.0], [110.0, 738.0], [109.0, 717.0], [108.0, 975.0], [115.0, 516.0], [114.0, 399.0], [113.0, 1158.0], [112.0, 778.0], [119.0, 463.0], [118.0, 660.0], [117.0, 470.0], [116.0, 481.0], [123.0, 429.0], [122.0, 2569.0], [121.0, 704.0], [120.0, 515.0], [125.0, 457.0], [124.0, 633.0], [1.0, 161.0]], "isOverall": false, "label": "Request Writer", "isController": false}, {"data": [[63.01600000000001, 683.4159999999999]], "isOverall": false, "label": "Request Writer-Aggregated", "isController": false}, {"data": [[2.0, 32163.0], [3.0, 38583.0], [5.0, 10317.5], [8.0, 13234.333333333334], [11.0, 2583.0], [12.0, 17609.333333333332], [15.0, 4198.0], [16.0, 17777.5], [17.0, 4370.5], [20.0, 17891.0], [21.0, 29663.0], [25.0, 32505.0], [26.0, 8174.0], [31.0, 14252.5], [32.0, 6391.5], [35.0, 12815.666666666666], [34.0, 18778.0], [37.0, 21577.0], [38.0, 16747.0], [40.0, 22780.8], [44.0, 14804.0], [47.0, 22979.0], [46.0, 21651.5], [49.0, 28598.0], [50.0, 13673.0], [52.0, 23962.0], [58.0, 35528.0], [61.0, 33948.0], [60.0, 30306.0], [63.0, 12032.0], [67.0, 12030.0], [66.0, 31093.0], [64.0, 19117.8], [71.0, 15627.75], [75.0, 14911.0], [77.0, 30420.0], [76.0, 17000.0], [83.0, 24247.0], [81.0, 25414.666666666668], [85.0, 21866.5], [90.0, 19688.0], [88.0, 19507.5], [94.0, 14507.5], [93.0, 14076.5], [99.0, 17773.0], [96.0, 11842.0], [103.0, 11604.0], [100.0, 10687.0], [107.0, 26477.0], [105.0, 18713.0], [104.0, 18797.0], [111.0, 16482.333333333332], [110.0, 13015.0], [115.0, 19704.0], [114.0, 23510.0], [113.0, 13833.0], [112.0, 15579.5], [117.0, 13529.0], [116.0, 20318.0], [121.0, 14451.0], [120.0, 16463.0], [125.0, 10415.0], [124.0, 9526.333333333334], [1.0, 758.0]], "isOverall": false, "label": "Request Wafilife_Book", "isController": false}, {"data": [[65.98400000000001, 17587.2]], "isOverall": false, "label": "Request Wafilife_Book-Aggregated", "isController": false}, {"data": [[41.0, 40348.0], [40.0, 41098.0], [42.0, 1013.0], [43.0, 1092.0], [52.0, 38091.0], [57.0, 3928.0], [64.0, 18221.5], [69.0, 2936.0], [71.0, 34623.5], [74.0, 5106.0], [75.0, 20409.5], [82.0, 3477.0], [83.0, 26717.0], [85.0, 25733.0], [89.0, 4716.0], [88.0, 30349.0], [94.0, 20706.0], [95.0, 4922.0], [99.0, 6873.0], [96.0, 28067.0], [103.0, 30510.0], [101.0, 24927.0], [105.0, 5759.6], [107.0, 29527.0], [110.0, 6052.0], [111.0, 27984.0], [108.0, 21758.0], [114.0, 8816.0], [113.0, 19737.0], [112.0, 21755.0], [117.0, 16717.0], [116.0, 16818.0], [120.0, 13131.666666666666], [123.0, 17152.333333333332], [121.0, 17145.0], [124.0, 11249.578947368422], [125.0, 8002.249999999999], [1.0, 49947.0], [17.0, 38605.0], [21.0, 42549.0], [23.0, 44718.0], [26.0, 40688.0]], "isOverall": false, "label": "Request Wafilife", "isController": false}, {"data": [[105.61599999999997, 15266.712000000003]], "isOverall": false, "label": "Request Wafilife-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 125.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 380.46666666666664, "minX": 1.63810674E12, "maxY": 1860378.1666666667, "series": [{"data": [[1.6381068E12, 1645579.9666666666], [1.63810674E12, 1860378.1666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6381068E12, 380.46666666666664], [1.63810674E12, 430.01666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6381068E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 650.2345679012344, "minX": 1.63810674E12, "maxY": 39435.92857142858, "series": [{"data": [[1.6381068E12, 650.2345679012344], [1.63810674E12, 744.5000000000001]], "isOverall": false, "label": "Request Writer", "isController": false}, {"data": [[1.6381068E12, 18083.842105263157], [1.63810674E12, 16816.897959183676]], "isOverall": false, "label": "Request Wafilife_Book", "isController": false}, {"data": [[1.6381068E12, 39435.92857142858], [1.63810674E12, 12218.342342342343]], "isOverall": false, "label": "Request Wafilife", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6381068E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 191.13636363636363, "minX": 1.63810674E12, "maxY": 1297.144144144144, "series": [{"data": [[1.6381068E12, 221.49382716049374], [1.63810674E12, 191.13636363636363]], "isOverall": false, "label": "Request Writer", "isController": false}, {"data": [[1.6381068E12, 920.9210526315786], [1.63810674E12, 343.93877551020404]], "isOverall": false, "label": "Request Wafilife_Book", "isController": false}, {"data": [[1.6381068E12, 1115.9285714285716], [1.63810674E12, 1297.144144144144]], "isOverall": false, "label": "Request Wafilife", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6381068E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.63810674E12, "maxY": 1268.1351351351352, "series": [{"data": [[1.6381068E12, 0.0], [1.63810674E12, 0.0]], "isOverall": false, "label": "Request Writer", "isController": false}, {"data": [[1.6381068E12, 2.4605263157894743], [1.63810674E12, 0.0]], "isOverall": false, "label": "Request Wafilife_Book", "isController": false}, {"data": [[1.6381068E12, 853.5], [1.63810674E12, 1268.1351351351352]], "isOverall": false, "label": "Request Wafilife", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6381068E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 109.0, "minX": 1.63810674E12, "maxY": 49947.0, "series": [{"data": [[1.6381068E12, 49947.0], [1.63810674E12, 32195.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6381068E12, 32499.8], [1.63810674E12, 22447.399999999998]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6381068E12, 46182.12], [1.63810674E12, 30503.56]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6381068E12, 39302.20000000001], [1.63810674E12, 26561.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6381068E12, 109.0], [1.63810674E12, 220.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6381068E12, 3666.0], [1.63810674E12, 10144.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6381068E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 245.0, "minX": 1.0, "maxY": 24421.0, "series": [{"data": [[2.0, 3702.5], [8.0, 11304.5], [9.0, 1979.5], [10.0, 11604.0], [11.0, 16311.0], [3.0, 7034.0], [12.0, 4198.0], [14.0, 10959.5], [1.0, 1092.0], [4.0, 9277.0], [16.0, 7195.5], [17.0, 245.0], [19.0, 928.0], [5.0, 5199.0], [6.0, 7543.5], [25.0, 4058.0], [7.0, 12745.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[12.0, 24421.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 1052.0, "series": [{"data": [[2.0, 448.5], [8.0, 410.5], [9.0, 257.0], [10.0, 270.5], [11.0, 211.0], [3.0, 1052.0], [12.0, 185.0], [14.0, 235.0], [1.0, 613.0], [4.0, 285.5], [16.0, 242.0], [17.0, 127.0], [19.0, 232.0], [5.0, 327.5], [6.0, 351.0], [25.0, 252.0], [7.0, 379.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[12.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.63810674E12, "maxY": 4.75, "series": [{"data": [[1.6381068E12, 1.5], [1.63810674E12, 4.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6381068E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63810674E12, "maxY": 3.3833333333333333, "series": [{"data": [[1.6381068E12, 2.85], [1.63810674E12, 3.3833333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63810674E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6381068E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63810674E12, "maxY": 1.8333333333333333, "series": [{"data": [[1.6381068E12, 0.23333333333333334], [1.63810674E12, 1.8333333333333333]], "isOverall": false, "label": "Request Wafilife-success", "isController": false}, {"data": [[1.63810674E12, 0.016666666666666666]], "isOverall": false, "label": "Request Wafilife-failure", "isController": false}, {"data": [[1.6381068E12, 1.35], [1.63810674E12, 0.7333333333333333]], "isOverall": false, "label": "Request Writer-success", "isController": false}, {"data": [[1.6381068E12, 1.2666666666666666], [1.63810674E12, 0.8166666666666667]], "isOverall": false, "label": "Request Wafilife_Book-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6381068E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63810674E12, "maxY": 3.3833333333333333, "series": [{"data": [[1.6381068E12, 2.85], [1.63810674E12, 3.3833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63810674E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6381068E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

